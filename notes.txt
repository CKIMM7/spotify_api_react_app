//   const {
//     isLoading,
//     isError,
//     error,
//     results,
//     arrayLength
// } = useGetArts(pageNum)
 
// const [arts, setArts] = useState([]);
//   useEffect(() => {

//     function getArts () {
//     axios(`https://api.artic.edu/api/v1/artworks?&limit=20`, {
//         method: 'GET',
//       })
//       .then (arts => {
//         //console.log(arts.data.data)
//         setArts(arts.data.data) 
//       })
//       .catch(err => {
//         console.warn(err)
//       })           
//   }
//   getArts();
  
//   }, [])
  
//   console.log(results)

//   const artsArray = arts.map((art, index) => {
//     return (<Arts
//                 key={index} 
//                 data={art}
//             />)
// });
        <Route path=':artist' element={<Artist />} ></Route>

        :root {
  font-family: Inter, Avenir, Helvetica, Arial, sans-serif;
  font-size: 16px;
  line-height: 24px;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  -webkit-text-size-adjust: 100%;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  display: flex;
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}


const dispatch = useDispatch();
  const isLoading = useSelector((state) => state.cart.isLoading);
  const pageNum = useSelector((state) => state.cart.pageNum);
  const {
    isError,
    error,
    results,
    arrayLength
} = useGetArts(pageNum)

const intObserver = useRef()
  const lastPostRef = useCallback(article => {
      if (isLoading) return
  
      if (intObserver.current) intObserver.current.disconnect()
  
      console.log(arrayLength)
  
      intObserver.current = new IntersectionObserver(lastArticle => {
        console.log(arrayLength)
  
          if (lastArticle[0].isIntersecting) {
              console.log('We are near the last post!')
              dispatch(artsActions.setPageNum(1))
          } 
          // else if (lastArticle[0].isIntersecting) {
          //   dispatch(artsActions.getMoreArts())
          // }
      })
  
      if (article) intObserver.current.observe(article)
  }, [isLoading])
  
  
  if (isError) return <p className='center'>Error: {error.message}</p>
  
  const content = results.map((art, i) => {
    if(results.length === i + 1) {
      return <ArtTest ref={lastPostRef} key={i} art={art} />
    }
    return <ArtTest key={i} art={art} />
  })
